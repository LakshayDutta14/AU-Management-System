<?xml version="1.0" encoding="UTF-8"?><testrun duration="2549" footerText="Generated by IntelliJ IDEA on 3/12/21, 7:14 PM" name="com.AU.backend in backend">
    <count name="total" value="73"/>
    <count name="passed" value="73"/>
    <config nameIsGenerated="true" configId="JUnit" name="com.AU.backend in backend">
        <module name="backend"/>
        <extension name="coverage" track_test_folders="true"/>
        <option name="PACKAGE_NAME" value="com.AU.backend"/>
        <option name="MAIN_CLASS_NAME" value=""/>
        <option name="METHOD_NAME" value=""/>
        <option name="TEST_OBJECT" value="package"/>
    </config>
    <root name="backend" comment="com.AU" location="java:suite://com.AU.backend">
        <output type="stdout">&amp;quot;C:\Program Files\Java\jdk-15.0.1\bin\java.exe&amp;quot; -ea -javaagent:C:\Users\DELL\AppData\Local\JetBrains\IdeaIC2020.3\testAgent\intellij-coverage-agent-1.0.573.jar=C:\Users\DELL\AppData\Local\Temp\coverage1args -Didea.test.cyclic.buffer.size=1048576 &amp;quot;-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2020.3\lib\idea_rt.jar=62769:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2020.3\bin&amp;quot; -Dfile.encoding=UTF-8 -classpath &amp;quot;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2020.3\lib\idea_rt.jar;C:\Users\DELL\.m2\repository\org\junit\platform\junit-platform-launcher\1.7.1\junit-platform-launcher-1.7.1.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2020.3\plugins\junit\lib\junit5-rt.jar;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2020.3\plugins\junit\lib\junit-rt.jar;C:\Users\DELL\Desktop\backend_with_tests\backend\target\test-classes;C:\Users\DELL\Desktop\backend_with_tests\backend\target\classes;C:\Users\DELL\.m2\repository\com\openpojo\openpojo\0.8.3\openpojo-0.8.3.jar;C:\Users\DELL\.m2\repository\org\springframework\boot\spring-boot-starter-data-jdbc\2.4.3\spring-boot-starter-data-jdbc-2.4.3.jar;C:\Users\DELL\.m2\repository\org\springframework\data\spring-data-jdbc\2.1.5\spring-data-jdbc-2.1.5.jar;C:\Users\DELL\.m2\repository\org\springframework\data\spring-data-relational\2.1.5\spring-data-relational-2.1.5.jar;C:\Users\DELL\.m2\repository\org\springframework\data\spring-data-commons\2.4.5\spring-data-commons-2.4.5.jar;C:\Users\DELL\.m2\repository\org\springframework\spring-tx\5.3.4\spring-tx-5.3.4.jar;C:\Users\DELL\.m2\repository\org\springframework\spring-context\5.3.4\spring-context-5.3.4.jar;C:\Users\DELL\.m2\repository\org\springframework\spring-beans\5.3.4\spring-beans-5.3.4.jar;C:\Users\DELL\.m2\repository\org\slf4j\slf4j-api\1.7.30\slf4j-api-1.7.30.jar;C:\Users\DELL\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\2.4.3\spring-boot-starter-jdbc-2.4.3.jar;C:\Users\DELL\.m2\repository\org\springframework\boot\spring-boot-starter\2.4.3\spring-boot-starter-2.4.3.jar;C:\Users\DELL\.m2\repository\org\springframework\boot\spring-boot\2.4.3\spring-boot-2.4.3.jar;C:\Users\DELL\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\2.4.3\spring-boot-autoconfigure-2.4.3.jar;C:\Users\DELL\.m2\repository\org\springframework\boot\spring-boot-starter-logging\2.4.3\spring-boot-starter-logging-2.4.3.jar;C:\Users\DELL\.m2\repository\ch\qos\logback\logback-classic\1.2.3\logback-classic-1.2.3.jar;C:\Users\DELL\.m2\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar;C:\Users\DELL\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.13.3\log4j-to-slf4j-2.13.3.jar;C:\Users\DELL\.m2\repository\org\apache\logging\log4j\log4j-api\2.13.3\log4j-api-2.13.3.jar;C:\Users\DELL\.m2\repository\org\slf4j\jul-to-slf4j\1.7.30\jul-to-slf4j-1.7.30.jar;C:\Users\DELL\.m2\repository\jakarta\annotation\jakarta.annotation-api\1.3.5\jakarta.annotation-api-1.3.5.jar;C:\Users\DELL\.m2\repository\org\yaml\snakeyaml\1.27\snakeyaml-1.27.jar;C:\Users\DELL\.m2\repository\com\zaxxer\HikariCP\3.4.5\HikariCP-3.4.5.jar;C:\Users\DELL\.m2\repository\org\springframework\spring-jdbc\5.3.4\spring-jdbc-5.3.4.jar;C:\Users\DELL\.m2\repository\org\springframework\boot\spring-boot-starter-web\2.4.3\spring-boot-starter-web-2.4.3.jar;C:\Users\DELL\.m2\repository\org\springframework\boot\spring-boot-starter-json\2.4.3\spring-boot-starter-json-2.4.3.jar;C:\Users\DELL\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.11.4\jackson-databind-2.11.4.jar;C:\Users\DELL\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.11.4\jackson-annotations-2.11.4.jar;C:\Users\DELL\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.11.4\jackson-core-2.11.4.jar;C:\Users\DELL\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.11.4\jackson-datatype-jdk8-2.11.4.jar;C:\Users\DELL\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.11.4\jackson-datatype-jsr310-2.11.4.jar;C:\Users\DELL\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.11.4\jackson-module-parameter-names-2.11.4.jar;C:\Users\DELL\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\2.4.3\spring-boot-starter-tomcat-2.4.3.jar;C:\Users\DELL\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.43\tomcat-embed-core-9.0.43.jar;C:\Users\DELL\.m2\repository\org\glassfish\jakarta.el\3.0.3\jakarta.el-3.0.3.jar;C:\Users\DELL\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.43\tomcat-embed-websocket-9.0.43.jar;C:\Users\DELL\.m2\repository\org\springframework\spring-web\5.3.4\spring-web-5.3.4.jar;C:\Users\DELL\.m2\repository\org\springframework\spring-webmvc\5.3.4\spring-webmvc-5.3.4.jar;C:\Users\DELL\.m2\repository\org\springframework\spring-aop\5.3.4\spring-aop-5.3.4.jar;C:\Users\DELL\.m2\repository\org\springframework\spring-expression\5.3.4\spring-expression-5.3.4.jar;C:\Users\DELL\.m2\repository\org\springframework\boot\spring-boot-starter-test\2.4.3\spring-boot-starter-test-2.4.3.jar;C:\Users\DELL\.m2\repository\org\springframework\boot\spring-boot-test\2.4.3\spring-boot-test-2.4.3.jar;C:\Users\DELL\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\2.4.3\spring-boot-test-autoconfigure-2.4.3.jar;C:\Users\DELL\.m2\repository\com\jayway\jsonpath\json-path\2.4.0\json-path-2.4.0.jar;C:\Users\DELL\.m2\repository\net\minidev\json-smart\2.3\json-smart-2.3.jar;C:\Users\DELL\.m2\repository\net\minidev\accessors-smart\1.2\accessors-smart-1.2.jar;C:\Users\DELL\.m2\repository\org\ow2\asm\asm\5.0.4\asm-5.0.4.jar;C:\Users\DELL\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.3\jakarta.xml.bind-api-2.3.3.jar;C:\Users\DELL\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.2\jakarta.activation-api-1.2.2.jar;C:\Users\DELL\.m2\repository\org\assertj\assertj-core\3.18.1\assertj-core-3.18.1.jar;C:\Users\DELL\.m2\repository\org\hamcrest\hamcrest\2.2\hamcrest-2.2.jar;C:\Users\DELL\.m2\repository\org\junit\jupiter\junit-jupiter\5.7.1\junit-jupiter-5.7.1.jar;C:\Users\DELL\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.7.1\junit-jupiter-api-5.7.1.jar;C:\Users\DELL\.m2\repository\org\apiguardian\apiguardian-api\1.1.0\apiguardian-api-1.1.0.jar;C:\Users\DELL\.m2\repository\org\opentest4j\opentest4j\1.2.0\opentest4j-1.2.0.jar;C:\Users\DELL\.m2\repository\org\junit\platform\junit-platform-commons\1.7.1\junit-platform-commons-1.7.1.jar;C:\Users\DELL\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.7.1\junit-jupiter-params-5.7.1.jar;C:\Users\DELL\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.7.1\junit-jupiter-engine-5.7.1.jar;C:\Users\DELL\.m2\repository\org\junit\platform\junit-platform-engine\1.7.1\junit-platform-engine-1.7.1.jar;C:\Users\DELL\.m2\repository\org\mockito\mockito-core\3.6.28\mockito-core-3.6.28.jar;C:\Users\DELL\.m2\repository\net\bytebuddy\byte-buddy\1.10.20\byte-buddy-1.10.20.jar;C:\Users\DELL\.m2\repository\net\bytebuddy\byte-buddy-agent\1.10.20\byte-buddy-agent-1.10.20.jar;C:\Users\DELL\.m2\repository\org\objenesis\objenesis\3.1\objenesis-3.1.jar;C:\Users\DELL\.m2\repository\org\mockito\mockito-junit-jupiter\3.6.28\mockito-junit-jupiter-3.6.28.jar;C:\Users\DELL\.m2\repository\org\skyscreamer\jsonassert\1.5.0\jsonassert-1.5.0.jar;C:\Users\DELL\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\DELL\.m2\repository\org\springframework\spring-core\5.3.4\spring-core-5.3.4.jar;C:\Users\DELL\.m2\repository\org\springframework\spring-jcl\5.3.4\spring-jcl-5.3.4.jar;C:\Users\DELL\.m2\repository\org\springframework\spring-test\5.3.4\spring-test-5.3.4.jar;C:\Users\DELL\.m2\repository\org\xmlunit\xmlunit-core\2.7.0\xmlunit-core-2.7.0.jar;C:\Users\DELL\.m2\repository\mysql\mysql-connector-java\8.0.23\mysql-connector-java-8.0.23.jar;C:\Users\DELL\.m2\repository\org\projectlombok\lombok\1.18.18\lombok-1.18.18.jar&amp;quot; com.intellij.rt.junit.JUnitStarter -ideVersion5 -junit5 @w@C:\Users\DELL\AppData\Local\Temp\idea_working_dirs_junit.tmp @C:\Users\DELL\AppData\Local\Temp\idea_junit.tmp -socket62768
</output>
        <output type="stdout">---- IntelliJ IDEA coverage runner ---- 
sampling ...
include patterns:
exclude patterns:
Class transformation time: 6.918877213s for 8623 classes or 8.023747202829641E-4s per class
2021-03-12 15:16:43.332  INFO 8608 --- [extShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService &amp;#39;applicationTaskExecutor&amp;#39;
2021-03-12 15:16:43.333  INFO 8608 --- [extShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService &amp;#39;applicationTaskExecutor&amp;#39;
2021-03-12 15:16:43.338  INFO 8608 --- [extShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService &amp;#39;applicationTaskExecutor&amp;#39;
2021-03-12 15:16:43.338  INFO 8608 --- [extShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService &amp;#39;applicationTaskExecutor&amp;#39;
2021-03-12 15:16:43.341  INFO 8608 --- [extShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService &amp;#39;applicationTaskExecutor&amp;#39;
2021-03-12 15:16:43.342  INFO 8608 --- [extShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService &amp;#39;applicationTaskExecutor&amp;#39;
2021-03-12 15:16:43.347  INFO 8608 --- [extShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService &amp;#39;applicationTaskExecutor&amp;#39;
2021-03-12 15:16:43.356  INFO 8608 --- [extShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2021-03-12 15:16:43.498  INFO 8608 --- [extShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
</output>
        <output type="stdout">Process finished with exit code 0
</output>
    </root>
    <suite duration="171" locationUrl="java:suite://com.AU.backend.DaoTest.CourseDaoTest" name="CourseDaoTest" status="passed">
        <test duration="130" locationUrl="java:test://com.AU.backend.DaoTest.CourseDaoTest/getCoursesByIdTest" name="getCoursesByIdTest()" metainfo="" status="passed">
            <output type="stdout">2021-03-12 15:16:28.647  INFO 8608 --- [           main] com.AU.backend.Dao.CourseDao             : Retrieved the course with courseId=2
</output>
        </test>
        <test duration="17" locationUrl="java:test://com.AU.backend.DaoTest.CourseDaoTest/getAllCourseTest" name="getAllCourseTest()" metainfo="" status="passed">
            <output type="stdout">2021-03-12 15:16:28.694  INFO 8608 --- [           main] com.AU.backend.Dao.CourseDao             : Retrieved all the courses
</output>
        </test>
        <test duration="24" locationUrl="java:test://com.AU.backend.DaoTest.CourseDaoTest/deleteCourseTest" name="deleteCourseTest()" metainfo="" status="passed">
            <output type="stdout">2021-03-12 15:16:28.724  INFO 8608 --- [           main] com.AU.backend.Dao.CourseDao             : Deleted the course with courseId=1
</output>
        </test>
    </suite>
    <suite duration="451" locationUrl="java:suite://com.AU.backend.ControllerTest.SkillControllerTest" name="SkillControllerTest" status="passed">
        <test duration="261" locationUrl="java:test://com.AU.backend.ControllerTest.SkillControllerTest/addSkillInCourse" name="addSkillInCourse()" metainfo="" status="passed">
            <output type="stdout">MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /course/addSkillInCourse/2/1
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}
Handler:
             Type = com.AU.backend.Controller.SkillsController
           Method = com.AU.backend.Controller.SkillsController#addSKillInCourse(int, int)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = [Vary:&amp;quot;Origin&amp;quot;, &amp;quot;Access-Control-Request-Method&amp;quot;, &amp;quot;Access-Control-Request-Headers&amp;quot;, Content-Type:&amp;quot;application/json&amp;quot;]
     Content type = application/json
             Body = true
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="50" locationUrl="java:test://com.AU.backend.ControllerTest.SkillControllerTest/getAllSkills" name="getAllSkills()" metainfo="" status="passed">
            <output type="stdout">MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /course/getAllSkills/2
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}
Handler:
             Type = com.AU.backend.Controller.SkillsController
           Method = com.AU.backend.Controller.SkillsController#getAllSkills(int)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:&amp;quot;Origin&amp;quot;, &amp;quot;Access-Control-Request-Method&amp;quot;, &amp;quot;Access-Control-Request-Headers&amp;quot;, Content-Type:&amp;quot;application/json&amp;quot;]
     Content type = application/json
             Body = [&amp;quot;Angular&amp;quot;,&amp;quot;java&amp;quot;]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="48" locationUrl="java:test://com.AU.backend.ControllerTest.SkillControllerTest/deleteSkillInCourseTest" name="deleteSkillInCourseTest()" metainfo="" status="passed">
            <output type="stdout">MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /course/deleteSkillInCourse/2/1
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}
Handler:
             Type = com.AU.backend.Controller.SkillsController
           Method = com.AU.backend.Controller.SkillsController#deleteSkillInCourse(int, int)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:&amp;quot;Origin&amp;quot;, &amp;quot;Access-Control-Request-Method&amp;quot;, &amp;quot;Access-Control-Request-Headers&amp;quot;, Content-Type:&amp;quot;application/json&amp;quot;]
     Content type = application/json
             Body = true
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="92" locationUrl="java:test://com.AU.backend.ControllerTest.SkillControllerTest/getSkillsTest" name="getSkillsTest()" metainfo="" status="passed">
            <output type="stdout">MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /course/getAllSkillsAll
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}
Handler:
             Type = com.AU.backend.Controller.SkillsController
           Method = com.AU.backend.Controller.SkillsController#getAllSkillsAll()
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:&amp;quot;Origin&amp;quot;, &amp;quot;Access-Control-Request-Method&amp;quot;, &amp;quot;Access-Control-Request-Headers&amp;quot;, Content-Type:&amp;quot;application/json&amp;quot;]
     Content type = application/json
             Body = [{&amp;quot;skillName&amp;quot;:&amp;quot;angular&amp;quot;,&amp;quot;skillId&amp;quot;:1},{&amp;quot;skillName&amp;quot;:&amp;quot;java&amp;quot;,&amp;quot;skillId&amp;quot;:2}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
    </suite>
    <suite duration="19" locationUrl="java:suite://com.AU.backend.ServiceTest.LoginServiceTest" name="LoginServiceTest" status="passed">
        <test duration="19" locationUrl="java:test://com.AU.backend.ServiceTest.LoginServiceTest/loginByGoogleTest" name="loginByGoogleTest()" metainfo="" status="passed"/>
    </suite>
    <suite duration="9" locationUrl="java:suite://com.AU.backend.BackendApplicationTests" name="BackendApplicationTests" status="passed">
        <test duration="9" locationUrl="java:test://com.AU.backend.BackendApplicationTests/contextLoads" name="contextLoads()" metainfo="" status="passed"/>
    </suite>
    <suite duration="219" locationUrl="java:suite://com.AU.backend.ModelTest.SkillTest" name="SkillTest" status="passed">
        <test duration="219" locationUrl="java:test://com.AU.backend.ModelTest.SkillTest/testGetterSetter" name="testGetterSetter()" metainfo="" status="passed">
            <output type="stdout">2021-03-12 15:16:31.767  INFO 8608 --- [           main] com.openpojo.log.LoggerFactory           : Logging subsystem initialized to [com.openpojo.log.impl.SLF4JLogger]
2021-03-12 15:16:31.782  INFO 8608 --- [           main] c.o.validation.affirm.Affirmation        : Dynamically setting affirmation implementation = [com.openpojo.validation.affirm.JavaAssertionAffirmation [@280099a0: ]]
</output>
        </test>
    </suite>
    <suite duration="521" locationUrl="java:suite://com.AU.backend.ControllerTest.CourseControllerTest" name="CourseControllerTest" status="passed">
        <test duration="35" locationUrl="java:test://com.AU.backend.ControllerTest.CourseControllerTest/deleteCourse" name="deleteCourse()" metainfo="" status="passed">
            <output type="stdout">MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /course/deleteCourse/2
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}
Handler:
             Type = com.AU.backend.Controller.CourseController
           Method = com.AU.backend.Controller.CourseController#deleteCourse(int)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:&amp;quot;Origin&amp;quot;, &amp;quot;Access-Control-Request-Method&amp;quot;, &amp;quot;Access-Control-Request-Headers&amp;quot;, Content-Type:&amp;quot;application/json&amp;quot;]
     Content type = application/json
             Body = true
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="341" locationUrl="java:test://com.AU.backend.ControllerTest.CourseControllerTest/addCourse" name="addCourse()" metainfo="" status="passed">
            <output type="stdout">MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /course/addCourse
       Parameters = {}
          Headers = [Content-Type:&amp;quot;application/json;charset=UTF-8&amp;quot;, Content-Length:&amp;quot;212&amp;quot;]
             Body = {&amp;quot;courseName&amp;quot;:&amp;quot;angular&amp;quot;,&amp;quot;courseDescription&amp;quot;:&amp;quot;description1&amp;quot;,&amp;quot;prerequisite&amp;quot;:&amp;quot;pre1&amp;quot;,&amp;quot;userId&amp;quot;:0,&amp;quot;courseId&amp;quot;:1,&amp;quot;createdOn&amp;quot;:&amp;quot;2021-03-12T09:46:33.423+00:00&amp;quot;,&amp;quot;lastUpdated&amp;quot;:&amp;quot;2021-03-12T09:46:33.423+00:00&amp;quot;,&amp;quot;imageUrl&amp;quot;:&amp;quot;img&amp;quot;}
    Session Attrs = {}
Handler:
             Type = com.AU.backend.Controller.CourseController
           Method = com.AU.backend.Controller.CourseController#addCourse(Course)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = [Vary:&amp;quot;Origin&amp;quot;, &amp;quot;Access-Control-Request-Method&amp;quot;, &amp;quot;Access-Control-Request-Headers&amp;quot;]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="41" locationUrl="java:test://com.AU.backend.ControllerTest.CourseControllerTest/getCourseByIdTest" name="getCourseByIdTest()" metainfo="" status="passed">
            <output type="stdout">MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /course/getById/2
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}
Handler:
             Type = com.AU.backend.Controller.CourseController
           Method = com.AU.backend.Controller.CourseController#getCourseById(int)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:&amp;quot;Origin&amp;quot;, &amp;quot;Access-Control-Request-Method&amp;quot;, &amp;quot;Access-Control-Request-Headers&amp;quot;, Content-Type:&amp;quot;application/json&amp;quot;]
     Content type = application/json
             Body = {&amp;quot;courseName&amp;quot;:&amp;quot;angular2&amp;quot;,&amp;quot;courseDescription&amp;quot;:&amp;quot;description2&amp;quot;,&amp;quot;prerequisite&amp;quot;:&amp;quot;pre2&amp;quot;,&amp;quot;userId&amp;quot;:0,&amp;quot;courseId&amp;quot;:2,&amp;quot;createdOn&amp;quot;:&amp;quot;2021-03-12T09:46:33.768+00:00&amp;quot;,&amp;quot;lastUpdated&amp;quot;:&amp;quot;2021-03-12T09:46:33.768+00:00&amp;quot;,&amp;quot;imageUrl&amp;quot;:&amp;quot;img2&amp;quot;}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="84" locationUrl="java:test://com.AU.backend.ControllerTest.CourseControllerTest/getAllCourseTest" name="getAllCourseTest()" metainfo="" status="passed">
            <output type="stdout">MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /course/all
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}
Handler:
             Type = com.AU.backend.Controller.CourseController
           Method = com.AU.backend.Controller.CourseController#getAllCourses()
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:&amp;quot;Origin&amp;quot;, &amp;quot;Access-Control-Request-Method&amp;quot;, &amp;quot;Access-Control-Request-Headers&amp;quot;, Content-Type:&amp;quot;application/json&amp;quot;]
     Content type = application/json
             Body = [{&amp;quot;courseName&amp;quot;:&amp;quot;angular&amp;quot;,&amp;quot;courseDescription&amp;quot;:&amp;quot;description1&amp;quot;,&amp;quot;prerequisite&amp;quot;:&amp;quot;pre1&amp;quot;,&amp;quot;userId&amp;quot;:0,&amp;quot;courseId&amp;quot;:1,&amp;quot;createdOn&amp;quot;:&amp;quot;2021-03-12T09:46:33.816+00:00&amp;quot;,&amp;quot;lastUpdated&amp;quot;:&amp;quot;2021-03-12T09:46:33.816+00:00&amp;quot;,&amp;quot;imageUrl&amp;quot;:&amp;quot;img&amp;quot;},{&amp;quot;courseName&amp;quot;:&amp;quot;angular2&amp;quot;,&amp;quot;courseDescription&amp;quot;:&amp;quot;description2&amp;quot;,&amp;quot;prerequisite&amp;quot;:&amp;quot;pre2&amp;quot;,&amp;quot;userId&amp;quot;:0,&amp;quot;courseId&amp;quot;:2,&amp;quot;createdOn&amp;quot;:&amp;quot;2021-03-12T09:46:33.816+00:00&amp;quot;,&amp;quot;lastUpdated&amp;quot;:&amp;quot;2021-03-12T09:46:33.816+00:00&amp;quot;,&amp;quot;imageUrl&amp;quot;:&amp;quot;img2&amp;quot;}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="20" locationUrl="java:test://com.AU.backend.ControllerTest.CourseControllerTest/updateCourseTest" name="updateCourseTest()" metainfo="" status="passed">
            <output type="stdout">MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /course/updateCourse/2
       Parameters = {}
          Headers = [Content-Type:&amp;quot;application/json;charset=UTF-8&amp;quot;, Content-Length:&amp;quot;212&amp;quot;]
             Body = {&amp;quot;courseName&amp;quot;:&amp;quot;angular&amp;quot;,&amp;quot;courseDescription&amp;quot;:&amp;quot;description1&amp;quot;,&amp;quot;prerequisite&amp;quot;:&amp;quot;pre1&amp;quot;,&amp;quot;userId&amp;quot;:0,&amp;quot;courseId&amp;quot;:1,&amp;quot;createdOn&amp;quot;:&amp;quot;2021-03-12T09:46:33.923+00:00&amp;quot;,&amp;quot;lastUpdated&amp;quot;:&amp;quot;2021-03-12T09:46:33.923+00:00&amp;quot;,&amp;quot;imageUrl&amp;quot;:&amp;quot;img&amp;quot;}
    Session Attrs = {}
Handler:
             Type = com.AU.backend.Controller.CourseController
           Method = com.AU.backend.Controller.CourseController#updateCourse(int, Course)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:&amp;quot;Origin&amp;quot;, &amp;quot;Access-Control-Request-Method&amp;quot;, &amp;quot;Access-Control-Request-Headers&amp;quot;]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
    </suite>
    <suite duration="5" locationUrl="java:suite://com.AU.backend.ModelTest.TrendsTest" name="TrendsTest" status="passed">
        <test duration="5" locationUrl="java:test://com.AU.backend.ModelTest.TrendsTest/testGetterSetter" name="testGetterSetter()" metainfo="" status="passed"/>
    </suite>
    <suite duration="36" locationUrl="java:suite://com.AU.backend.ControllerTest.LoginControllerTest" name="LoginControllerTest" status="passed">
        <test duration="36" locationUrl="java:test://com.AU.backend.ControllerTest.LoginControllerTest/loginByGoogleTest" name="loginByGoogleTest()" metainfo="" status="passed">
            <output type="stdout">hello
MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /login/googleLogin
       Parameters = {}
          Headers = [Content-Type:&amp;quot;application/json;charset=UTF-8&amp;quot;, Content-Length:&amp;quot;66&amp;quot;]
             Body = {&amp;quot;firstName&amp;quot;:&amp;quot;ABC&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;DEF&amp;quot;,&amp;quot;emailId&amp;quot;:&amp;quot;email1&amp;quot;,&amp;quot;userId&amp;quot;:1}
    Session Attrs = {}
Handler:
             Type = com.AU.backend.Controller.LoginController
           Method = com.AU.backend.Controller.LoginController#loginByGoogle(User)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:&amp;quot;Origin&amp;quot;, &amp;quot;Access-Control-Request-Method&amp;quot;, &amp;quot;Access-Control-Request-Headers&amp;quot;]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
    </suite>
    <suite duration="77" locationUrl="java:suite://com.AU.backend.ServiceTest.CourseServiceTest" name="CourseServiceTest" status="passed">
        <test duration="10" locationUrl="java:test://com.AU.backend.ServiceTest.CourseServiceTest/addCourseTest" name="addCourseTest()" metainfo="" status="passed"/>
        <test duration="9" locationUrl="java:test://com.AU.backend.ServiceTest.CourseServiceTest/updateCourse" name="updateCourse()" metainfo="" status="passed"/>
        <test duration="15" locationUrl="java:test://com.AU.backend.ServiceTest.CourseServiceTest/getAllCoursesTest" name="getAllCoursesTest()" metainfo="" status="passed"/>
        <test duration="13" locationUrl="java:test://com.AU.backend.ServiceTest.CourseServiceTest/getCourseByIdTest" name="getCourseByIdTest()" metainfo="" status="passed"/>
        <test duration="30" locationUrl="java:test://com.AU.backend.ServiceTest.CourseServiceTest/deleteCourseTest" name="deleteCourseTest()" metainfo="" status="passed"/>
    </suite>
    <suite duration="10" locationUrl="java:suite://com.AU.backend.DaoTest.SkillDaoTest" name="SkillDaoTest" status="passed">
        <test duration="10" locationUrl="java:test://com.AU.backend.DaoTest.SkillDaoTest/getSkillsById" name="getSkillsById()" metainfo="" status="passed"/>
    </suite>
    <suite duration="17" locationUrl="java:suite://com.AU.backend.ModelTest.MaterialTest" name="MaterialTest" status="passed">
        <test duration="17" locationUrl="java:test://com.AU.backend.ModelTest.MaterialTest/testGetterSetter" name="testGetterSetter()" metainfo="" status="passed"/>
    </suite>
    <suite duration="138" locationUrl="java:suite://com.AU.backend.ServiceTest.MaterialServiceTest" name="MaterialServiceTest" status="passed">
        <test duration="21" locationUrl="java:test://com.AU.backend.ServiceTest.MaterialServiceTest/addMaterialTest" name="addMaterialTest()" metainfo="" status="passed"/>
        <test duration="15" locationUrl="java:test://com.AU.backend.ServiceTest.MaterialServiceTest/deleteAllMaterial" name="deleteAllMaterial()" metainfo="" status="passed"/>
        <test duration="69" locationUrl="java:test://com.AU.backend.ServiceTest.MaterialServiceTest/deleteLatestMaterialTest" name="deleteLatestMaterialTest()" metainfo="" status="passed"/>
        <test duration="13" locationUrl="java:test://com.AU.backend.ServiceTest.MaterialServiceTest/getLatestMaterialByCourseTest" name="getLatestMaterialByCourseTest()" metainfo="" status="passed"/>
        <test duration="9" locationUrl="java:test://com.AU.backend.ServiceTest.MaterialServiceTest/updateMaterialTest" name="updateMaterialTest()" metainfo="" status="passed"/>
        <test duration="11" locationUrl="java:test://com.AU.backend.ServiceTest.MaterialServiceTest/getAllMaterialByCourse" name="getAllMaterialByCourse()" metainfo="" status="passed"/>
    </suite>
    <suite duration="42" locationUrl="java:suite://com.AU.backend.ServiceTest.SkillServiceTest" name="SkillServiceTest" status="passed">
        <test duration="7" locationUrl="java:test://com.AU.backend.ServiceTest.SkillServiceTest/deleteSkillInCourseTest" name="deleteSkillInCourseTest()" metainfo="" status="passed"/>
        <test duration="8" locationUrl="java:test://com.AU.backend.ServiceTest.SkillServiceTest/getAllSkillsTest" name="getAllSkillsTest()" metainfo="" status="passed"/>
        <test duration="10" locationUrl="java:test://com.AU.backend.ServiceTest.SkillServiceTest/deleteAlSkillsTest" name="deleteAlSkillsTest()" metainfo="" status="passed"/>
        <test duration="8" locationUrl="java:test://com.AU.backend.ServiceTest.SkillServiceTest/addSkillInCourseTest" name="addSkillInCourseTest()" metainfo="" status="passed"/>
        <test duration="9" locationUrl="java:test://com.AU.backend.ServiceTest.SkillServiceTest/getAllSkillFromSkill" name="getAllSkillFromSkill()" metainfo="" status="passed"/>
    </suite>
    <suite duration="61" locationUrl="java:suite://com.AU.backend.DaoTest.SkillCourseMappingDaoTest" name="SkillCourseMappingDaoTest" status="passed">
        <test duration="11" locationUrl="java:test://com.AU.backend.DaoTest.SkillCourseMappingDaoTest/getAllSkillsfromSkillTest" name="getAllSkillsfromSkillTest()" metainfo="" status="passed"/>
        <test duration="14" locationUrl="java:test://com.AU.backend.DaoTest.SkillCourseMappingDaoTest/deleteAllSKillsInCourseTest" name="deleteAllSKillsInCourseTest()" metainfo="" status="passed">
            <output type="stdout">2021-03-12 15:16:37.231  INFO 8608 --- [           main] c.AU.backend.Dao.SkillCourseMappingDao   : Retrieved if any skill exist for a course with courseID=1
2021-03-12 15:16:37.232  INFO 8608 --- [           main] c.AU.backend.Dao.SkillCourseMappingDao   : Deleted all skills from skillCourseMapping with courseID=1
</output>
        </test>
        <test duration="11" locationUrl="java:test://com.AU.backend.DaoTest.SkillCourseMappingDaoTest/addSkillinCourseTest" name="addSkillinCourseTest()" metainfo="" status="passed">
            <output type="stdout">2021-03-12 15:16:37.250  INFO 8608 --- [           main] c.AU.backend.Dao.SkillCourseMappingDao   : Skill with skillId = 2 in course with courseId = 1
</output>
        </test>
        <test duration="16" locationUrl="java:test://com.AU.backend.DaoTest.SkillCourseMappingDaoTest/checkCourseExistTest" name="checkCourseExistTest()" metainfo="" status="passed">
            <output type="stdout">2021-03-12 15:16:37.269  INFO 8608 --- [           main] c.AU.backend.Dao.SkillCourseMappingDao   : Retrieved if any skill exist for a course with courseID=1
</output>
        </test>
        <test duration="9" locationUrl="java:test://com.AU.backend.DaoTest.SkillCourseMappingDaoTest/deleteSkillIncourseTest" name="deleteSkillIncourseTest()" metainfo="" status="passed">
            <output type="stdout">2021-03-12 15:16:37.286  INFO 8608 --- [           main] c.AU.backend.Dao.SkillCourseMappingDao   : Deleted skill from skillCourseMapping with skillId=2 with courseID=1
</output>
        </test>
    </suite>
    <suite duration="35" locationUrl="java:suite://com.AU.backend.DaoTest.TrendsDaoTest" name="TrendsDaoTest" status="passed">
        <test duration="25" locationUrl="java:test://com.AU.backend.DaoTest.TrendsDaoTest/getCourseRating" name="getCourseRating()" metainfo="" status="passed"/>
        <test duration="10" locationUrl="java:test://com.AU.backend.DaoTest.TrendsDaoTest/getTrendingSkills" name="getTrendingSkills()" metainfo="" status="passed"/>
    </suite>
    <suite duration="30" locationUrl="java:suite://com.AU.backend.ServiceTest.FeedbackServiceTest" name="FeedbackServiceTest" status="passed">
        <test duration="6" locationUrl="java:test://com.AU.backend.ServiceTest.FeedbackServiceTest/getFeedbackByCourseIdTest" name="getFeedbackByCourseIdTest()" metainfo="" status="passed"/>
        <test duration="10" locationUrl="java:test://com.AU.backend.ServiceTest.FeedbackServiceTest/deleteFeedbackByCourseTest" name="deleteFeedbackByCourseTest()" metainfo="" status="passed"/>
        <test duration="7" locationUrl="java:test://com.AU.backend.ServiceTest.FeedbackServiceTest/addFeedBackTest" name="addFeedBackTest()" metainfo="" status="passed"/>
        <test duration="7" locationUrl="java:test://com.AU.backend.ServiceTest.FeedbackServiceTest/deleteFeedbackTest" name="deleteFeedbackTest()" metainfo="" status="passed"/>
    </suite>
    <suite duration="79" locationUrl="java:suite://com.AU.backend.DaoTest.MaterialDaoTest" name="MaterialDaoTest" status="passed">
        <test duration="13" locationUrl="java:test://com.AU.backend.DaoTest.MaterialDaoTest/materialAlreadyExist" name="materialAlreadyExist()" metainfo="" status="passed"/>
        <test duration="11" locationUrl="java:test://com.AU.backend.DaoTest.MaterialDaoTest/deleteLatestVersionTest" name="deleteLatestVersionTest()" metainfo="" status="passed">
            <output type="stdout">1
2021-03-12 15:16:37.526  INFO 8608 --- [           main] com.AU.backend.Dao.MaterialDao           : Retrieved the latest material of courseID=1
</output>
        </test>
        <test duration="8" locationUrl="java:test://com.AU.backend.DaoTest.MaterialDaoTest/getMaterialByIdTest" name="getMaterialByIdTest()" metainfo="" status="passed">
            <output type="stdout">2021-03-12 15:16:37.541  INFO 8608 --- [           main] com.AU.backend.Dao.MaterialDao           : Retrieved material with materialId=1
</output>
        </test>
        <test duration="12" locationUrl="java:test://com.AU.backend.DaoTest.MaterialDaoTest/deleteAllMaterial" name="deleteAllMaterial()" metainfo="" status="passed">
            <output type="stdout">2021-03-12 15:16:37.555  INFO 8608 --- [           main] com.AU.backend.Dao.MaterialDao           : Material deleted with courseId=1
</output>
        </test>
        <test duration="17" locationUrl="java:test://com.AU.backend.DaoTest.MaterialDaoTest/getLatestMaterialByCourseId" name="getLatestMaterialByCourseId()" metainfo="" status="passed">
            <output type="stdout">1
2021-03-12 15:16:37.575  INFO 8608 --- [           main] com.AU.backend.Dao.MaterialDao           : Retrieved the latest material of courseID=1
</output>
        </test>
        <test duration="9" locationUrl="java:test://com.AU.backend.DaoTest.MaterialDaoTest/getAllMaterialsByCourseId" name="getAllMaterialsByCourseId()" metainfo="" status="passed">
            <output type="stdout">2021-03-12 15:16:37.594  INFO 8608 --- [           main] com.AU.backend.Dao.MaterialDao           : Retrieved every material version of courseId=1 and materialId1
</output>
        </test>
        <test duration="9" locationUrl="java:test://com.AU.backend.DaoTest.MaterialDaoTest/getNumberOfVersions" name="getNumberOfVersions()" metainfo="" status="passed"/>
    </suite>
    <suite duration="15" locationUrl="java:suite://com.AU.backend.DaoTest.UserDaoTest" name="UserDaoTest" status="passed">
        <test duration="7" locationUrl="java:test://com.AU.backend.DaoTest.UserDaoTest/doesUserExist" name="doesUserExist()" metainfo="" status="passed">
            <output type="stdout">2021-03-12 15:16:37.638  INFO 8608 --- [           main] com.AU.backend.Dao.LoginDao              : User Exist Query Worked
</output>
        </test>
        <test duration="8" locationUrl="java:test://com.AU.backend.DaoTest.UserDaoTest/addUser" name="addUser()" metainfo="" status="passed">
            <output type="stdout">2021-03-12 15:16:37.649  INFO 8608 --- [           main] com.AU.backend.Dao.LoginDao              : User Exist Query Worked
</output>
        </test>
    </suite>
    <suite duration="71" locationUrl="java:suite://com.AU.backend.ControllerTest.TrendsControllerTest" name="TrendsControllerTest" status="passed">
        <test duration="55" locationUrl="java:test://com.AU.backend.ControllerTest.TrendsControllerTest/getCourseRating" name="getCourseRating()" metainfo="" status="passed">
            <output type="stdout">****
MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trends/getCourseRating
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}
Handler:
             Type = com.AU.backend.Controller.TrendsController
           Method = com.AU.backend.Controller.TrendsController#getCourseRating()
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:&amp;quot;Origin&amp;quot;, &amp;quot;Access-Control-Request-Method&amp;quot;, &amp;quot;Access-Control-Request-Headers&amp;quot;, Content-Type:&amp;quot;application/json&amp;quot;]
     Content type = application/json
             Body = [{&amp;quot;name&amp;quot;:&amp;quot;java&amp;quot;,&amp;quot;value&amp;quot;:1.0},{&amp;quot;name&amp;quot;:&amp;quot;c++&amp;quot;,&amp;quot;value&amp;quot;:2.0}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="16" locationUrl="java:test://com.AU.backend.ControllerTest.TrendsControllerTest/getTrendingSkills" name="getTrendingSkills()" metainfo="" status="passed">
            <output type="stdout">MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /trends/getTrendingSkills
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}
Handler:
             Type = com.AU.backend.Controller.TrendsController
           Method = com.AU.backend.Controller.TrendsController#getTrendingSkills()
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:&amp;quot;Origin&amp;quot;, &amp;quot;Access-Control-Request-Method&amp;quot;, &amp;quot;Access-Control-Request-Headers&amp;quot;, Content-Type:&amp;quot;application/json&amp;quot;]
     Content type = application/json
             Body = [{&amp;quot;name&amp;quot;:&amp;quot;java&amp;quot;,&amp;quot;value&amp;quot;:1.0},{&amp;quot;name&amp;quot;:&amp;quot;c++&amp;quot;,&amp;quot;value&amp;quot;:2.0}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
    </suite>
    <suite duration="374" locationUrl="java:suite://com.AU.backend.ControllerTest.MaterialControllerTest" name="MaterialControllerTest" status="passed">
        <test duration="30" locationUrl="java:test://com.AU.backend.ControllerTest.MaterialControllerTest/deleteLatestTest" name="deleteLatestTest()" metainfo="" status="passed">
            <output type="stdout">MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /material/deleteLatest/1
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}
Handler:
             Type = com.AU.backend.Controller.MaterialController
           Method = com.AU.backend.Controller.MaterialController#deleteLatestMaterial(int)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:&amp;quot;Origin&amp;quot;, &amp;quot;Access-Control-Request-Method&amp;quot;, &amp;quot;Access-Control-Request-Headers&amp;quot;, Content-Type:&amp;quot;application/json&amp;quot;]
     Content type = application/json
             Body = true
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="116" locationUrl="java:test://com.AU.backend.ControllerTest.MaterialControllerTest/addNewMaterialTest" name="addNewMaterialTest()" metainfo="" status="passed">
            <output type="stdout">MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /material/addMaterial
       Parameters = {courseId=[1], materialDescription=[description1], fileType=[pdf]}
          Headers = [Content-Type:&amp;quot;multipart/form-data;charset=UTF-8&amp;quot;]
             Body = null
    Session Attrs = {}
Handler:
             Type = com.AU.backend.Controller.MaterialController
           Method = com.AU.backend.Controller.MaterialController#addNewMaterial(int, String, String, MultipartFile[])
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:&amp;quot;Origin&amp;quot;, &amp;quot;Access-Control-Request-Method&amp;quot;, &amp;quot;Access-Control-Request-Headers&amp;quot;, Content-Type:&amp;quot;application/json&amp;quot;]
     Content type = application/json
             Body = [null]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="191" locationUrl="java:test://com.AU.backend.ControllerTest.MaterialControllerTest/getMaterialByCourseTest" name="getMaterialByCourseTest()" metainfo="" status="passed">
            <output type="stdout">MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /material/getLatestMaterial/1
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}
Handler:
             Type = com.AU.backend.Controller.MaterialController
           Method = com.AU.backend.Controller.MaterialController#getMaterialByCourse(int)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:&amp;quot;Origin&amp;quot;, &amp;quot;Access-Control-Request-Method&amp;quot;, &amp;quot;Access-Control-Request-Headers&amp;quot;, Content-Type:&amp;quot;application/json&amp;quot;]
     Content type = application/json
             Body = [{&amp;quot;materialId&amp;quot;:3,&amp;quot;courseId&amp;quot;:1,&amp;quot;parentId&amp;quot;:1,&amp;quot;createdAt&amp;quot;:&amp;quot;2021-03-12T09:46:41.124+00:00&amp;quot;,&amp;quot;lastUpdated&amp;quot;:&amp;quot;2021-03-12T09:46:41.124+00:00&amp;quot;,&amp;quot;materialDescription&amp;quot;:&amp;quot;description3&amp;quot;,&amp;quot;fileType&amp;quot;:&amp;quot;pdf&amp;quot;,&amp;quot;fileData&amp;quot;:null,&amp;quot;current&amp;quot;:true},{&amp;quot;materialId&amp;quot;:2,&amp;quot;courseId&amp;quot;:2,&amp;quot;parentId&amp;quot;:0,&amp;quot;createdAt&amp;quot;:&amp;quot;2021-03-12T09:46:41.124+00:00&amp;quot;,&amp;quot;lastUpdated&amp;quot;:&amp;quot;2021-03-12T09:46:41.124+00:00&amp;quot;,&amp;quot;materialDescription&amp;quot;:&amp;quot;description3&amp;quot;,&amp;quot;fileType&amp;quot;:&amp;quot;txt&amp;quot;,&amp;quot;fileData&amp;quot;:null,&amp;quot;current&amp;quot;:true}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="21" locationUrl="java:test://com.AU.backend.ControllerTest.MaterialControllerTest/updateMaterialTest" name="updateMaterialTest()" metainfo="" status="passed">
            <output type="stdout">MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /material/updateMaterial
       Parameters = {previousMaterialId=[1], courseId=[1], fileType=[pdf], materialDescription=[description3]}
          Headers = [Content-Type:&amp;quot;multipart/form-data;charset=UTF-8&amp;quot;]
             Body = null
    Session Attrs = {}
Handler:
             Type = com.AU.backend.Controller.MaterialController
           Method = com.AU.backend.Controller.MaterialController#updateMaterial(int, int, String, String, MultipartFile)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:&amp;quot;Origin&amp;quot;, &amp;quot;Access-Control-Request-Method&amp;quot;, &amp;quot;Access-Control-Request-Headers&amp;quot;]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="16" locationUrl="java:test://com.AU.backend.ControllerTest.MaterialControllerTest/getAllMaterialByCourseTest" name="getAllMaterialByCourseTest()" metainfo="" status="passed">
            <output type="stdout">MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /material/getAllMaterial/1/3
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}
Handler:
             Type = com.AU.backend.Controller.MaterialController
           Method = com.AU.backend.Controller.MaterialController#getAllMaterialByCourse(int, int)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:&amp;quot;Origin&amp;quot;, &amp;quot;Access-Control-Request-Method&amp;quot;, &amp;quot;Access-Control-Request-Headers&amp;quot;, Content-Type:&amp;quot;application/json&amp;quot;]
     Content type = application/json
             Body = [{&amp;quot;materialId&amp;quot;:3,&amp;quot;courseId&amp;quot;:1,&amp;quot;parentId&amp;quot;:1,&amp;quot;createdAt&amp;quot;:&amp;quot;2021-03-12T09:46:41.453+00:00&amp;quot;,&amp;quot;lastUpdated&amp;quot;:&amp;quot;2021-03-12T09:46:41.453+00:00&amp;quot;,&amp;quot;materialDescription&amp;quot;:&amp;quot;description3&amp;quot;,&amp;quot;fileType&amp;quot;:&amp;quot;pdf&amp;quot;,&amp;quot;fileData&amp;quot;:null,&amp;quot;current&amp;quot;:true},{&amp;quot;materialId&amp;quot;:1,&amp;quot;courseId&amp;quot;:1,&amp;quot;parentId&amp;quot;:0,&amp;quot;createdAt&amp;quot;:&amp;quot;2021-03-12T09:46:41.453+00:00&amp;quot;,&amp;quot;lastUpdated&amp;quot;:&amp;quot;2021-03-12T09:46:41.453+00:00&amp;quot;,&amp;quot;materialDescription&amp;quot;:&amp;quot;description1&amp;quot;,&amp;quot;fileType&amp;quot;:&amp;quot;pdf&amp;quot;,&amp;quot;fileData&amp;quot;:null,&amp;quot;current&amp;quot;:true}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
    </suite>
    <suite duration="3" locationUrl="java:suite://com.AU.backend.ModelTest.UserTest" name="UserTest" status="passed">
        <test duration="3" locationUrl="java:test://com.AU.backend.ModelTest.UserTest/testGetterSetter" name="testGetterSetter()" metainfo="" status="passed"/>
    </suite>
    <suite duration="7" locationUrl="java:suite://com.AU.backend.ModelTest.FeedbackTest" name="FeedbackTest" status="passed">
        <test duration="7" locationUrl="java:test://com.AU.backend.ModelTest.FeedbackTest/testGetterSetter" name="testGetterSetter()" metainfo="" status="passed"/>
    </suite>
    <suite duration="6" locationUrl="java:suite://com.AU.backend.ModelTest.CourseTest" name="CourseTest" status="passed">
        <test duration="6" locationUrl="java:test://com.AU.backend.ModelTest.CourseTest/testGetterSetter" name="testGetterSetter()" metainfo="" status="passed"/>
    </suite>
    <suite duration="74" locationUrl="java:suite://com.AU.backend.DaoTest.FeedbackDaoTest" name="FeedbackDaoTest" status="passed">
        <test duration="19" locationUrl="java:test://com.AU.backend.DaoTest.FeedbackDaoTest/deleteFeedBackByCourseTest" name="deleteFeedBackByCourseTest()" metainfo="" status="passed">
            <output type="stdout">2021-03-12 15:16:41.589  INFO 8608 --- [           main] com.AU.backend.Dao.FeedbackDao           : All the feedbacks for CourseID=1 retrieved successfully
2021-03-12 15:16:41.600  INFO 8608 --- [           main] com.AU.backend.Dao.FeedbackDao           : Feedback for courseId=1 don&amp;#39;t exist
</output>
        </test>
        <test duration="28" locationUrl="java:test://com.AU.backend.DaoTest.FeedbackDaoTest/getAllFeedback" name="getAllFeedback()" metainfo="" status="passed">
            <output type="stdout">2021-03-12 15:16:41.619  INFO 8608 --- [           main] com.AU.backend.Dao.FeedbackDao           : Successfully retrieved all the feedbacks 
</output>
        </test>
        <test duration="10" locationUrl="java:test://com.AU.backend.DaoTest.FeedbackDaoTest/deletefeedbackTest" name="deletefeedbackTest()" metainfo="" status="passed">
            <output type="stdout">2021-03-12 15:16:41.657  INFO 8608 --- [           main] com.AU.backend.Dao.FeedbackDao           : delete FeedBack Query was successfully executed
</output>
        </test>
        <test duration="8" locationUrl="java:test://com.AU.backend.DaoTest.FeedbackDaoTest/getFeedbackByCourseId" name="getFeedbackByCourseId()" metainfo="" status="passed">
            <output type="stdout">2021-03-12 15:16:41.675  INFO 8608 --- [           main] com.AU.backend.Dao.FeedbackDao           : All the feedbacks for CourseID=1 retrieved successfully
</output>
        </test>
        <test duration="9" locationUrl="java:test://com.AU.backend.DaoTest.FeedbackDaoTest/getFeedback" name="getFeedback()" metainfo="" status="passed">
            <output type="stdout">2021-03-12 15:16:41.691  INFO 8608 --- [           main] com.AU.backend.Dao.FeedbackDao           : Retrieved the feedback By feedbackId1
</output>
        </test>
    </suite>
    <suite duration="79" locationUrl="java:suite://com.AU.backend.ControllerTest.FeedbackControllerTest" name="FeedbackControllerTest" status="passed">
        <test duration="44" locationUrl="java:test://com.AU.backend.ControllerTest.FeedbackControllerTest/addFeedbackTest" name="addFeedbackTest()" metainfo="" status="passed">
            <output type="stdout">MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /feedback/addFeedback
       Parameters = {}
          Headers = [Content-Type:&amp;quot;application/json;charset=UTF-8&amp;quot;, Content-Length:&amp;quot;135&amp;quot;]
             Body = {&amp;quot;participantName&amp;quot;:&amp;quot;ABC&amp;quot;,&amp;quot;feedbackId&amp;quot;:1,&amp;quot;courseId&amp;quot;:1,&amp;quot;feedbackText&amp;quot;:&amp;quot;Awesome&amp;quot;,&amp;quot;rating&amp;quot;:4.0,&amp;quot;createdAt&amp;quot;:&amp;quot;2021-03-12T09:46:43.235+00:00&amp;quot;}
    Session Attrs = {}
Handler:
             Type = com.AU.backend.Controller.FeedbackController
           Method = com.AU.backend.Controller.FeedbackController#addFeedback(Feedback)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:&amp;quot;Origin&amp;quot;, &amp;quot;Access-Control-Request-Method&amp;quot;, &amp;quot;Access-Control-Request-Headers&amp;quot;]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="11" locationUrl="java:test://com.AU.backend.ControllerTest.FeedbackControllerTest/deleteFeedbackTest" name="deleteFeedbackTest()" metainfo="" status="passed">
            <output type="stdout">MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /feedback/delete/1
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}
Handler:
             Type = com.AU.backend.Controller.FeedbackController
           Method = com.AU.backend.Controller.FeedbackController#deleteFeedback(int)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:&amp;quot;Origin&amp;quot;, &amp;quot;Access-Control-Request-Method&amp;quot;, &amp;quot;Access-Control-Request-Headers&amp;quot;, Content-Type:&amp;quot;application/json&amp;quot;]
     Content type = application/json
             Body = true
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
        <test duration="24" locationUrl="java:test://com.AU.backend.ControllerTest.FeedbackControllerTest/getAllFeedbackByCourseTest" name="getAllFeedbackByCourseTest()" metainfo="" status="passed">
            <output type="stdout">MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /feedback/all/1
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}
Handler:
             Type = com.AU.backend.Controller.FeedbackController
           Method = com.AU.backend.Controller.FeedbackController#getAllFeedbackByCourse(int)
Async:
    Async started = false
     Async result = null
Resolved Exception:
             Type = null
ModelAndView:
        View name = null
             View = null
            Model = null
FlashMap:
       Attributes = null
MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:&amp;quot;Origin&amp;quot;, &amp;quot;Access-Control-Request-Method&amp;quot;, &amp;quot;Access-Control-Request-Headers&amp;quot;, Content-Type:&amp;quot;application/json&amp;quot;]
     Content type = application/json
             Body = [{&amp;quot;participantName&amp;quot;:&amp;quot;ABC&amp;quot;,&amp;quot;feedbackId&amp;quot;:1,&amp;quot;courseId&amp;quot;:1,&amp;quot;feedbackText&amp;quot;:&amp;quot;Awesome&amp;quot;,&amp;quot;rating&amp;quot;:4.0,&amp;quot;createdAt&amp;quot;:&amp;quot;2021-03-12T09:46:43.299+00:00&amp;quot;}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
</output>
        </test>
    </suite>
</testrun>
